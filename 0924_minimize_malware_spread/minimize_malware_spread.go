package leetcode0924

func minMalwareSpread(graph [][]int, initial []int) int {
	n := len(graph)
	f := newForest(n)
	for i := 0; i < n; i++ {
		for j := i + 1; j < n; j++ {
			if graph[i][j] == 1 {
				f.union(i, j)
			}
		}
	}
	area, malware := make([]int, n), make([]int, n)
	for i := 0; i < n; i++ {
		area[f.root(i)]++
	}
	for _, i := range initial {
		malware[f.root(i)]++
	}
	tmp, res := 0, initial[0]
	for _, i := range initial {
		if i < res {
			res = i
		}
	}
	for _, i := range initial {
		root := f.root(i)
		if malware[root] == 1 {
			if area[root] == tmp {
				if i < res {
					res = i
				}
			} else if area[root] > tmp {
				tmp, res = area[root], i
			}
		}
	}
	return res
}

type forest struct {
	parent []int
	weight []int
}

func newForest(n int) *forest {
	parent := make([]int, n)
	weight := make([]int, n)
	for i := 0; i < n; i++ {
		parent[i] = i
		weight[i] = 1
	}
	return &forest{parent, weight}
}

func (f *forest) root(x int) int {
	r := x
	for f.parent[r] != r {
		r = f.parent[r]
	}
	for f.parent[x] != x {
		p := f.parent[x]
		f.parent[x] = r
		x = p
	}
	return r
}

func (f *forest) union(x, y int) {
	r1 := f.root(x)
	r2 := f.root(y)
	if f.weight[r1] < f.weight[r2] {
		f.parent[r1] = r2
		f.weight[r2] += f.weight[r1]
	} else {
		f.parent[r2] = r1
		f.weight[r1] += f.weight[r2]
	}
}
